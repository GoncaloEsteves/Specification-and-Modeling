var abstract sig Person {
	var parents : set Person,
	var spouse : lone Person
}

var sig Man extends Person {}
var lone sig Adam extends Man {}

var sig Woman extends Person {}
var lone sig Eve extends Woman {}

// Specify some of the expected invariants

assert Acyclic {
	// Nobody can be their own ancestor
	all p : Person | p not in p.^parents
}

assert Spouses {
	// The spouse relationship is reciprocal
	spouse = ~spouse
}

assert Parents {
	// Everyone except Adam and Eve has one female and one male parent
	all p : (Person - (Adam + Eve)) | one (Man & p.parents) and one (Woman & p.parents)
}

assert Legal {
	// Nobody can have an ancestors as spouse
	all p : Person | (some p.spouse) implies (p.spouse not in p.^parents)
}

// Specify the following events

// Reproduction
pred reproduce [m : Man, w : Woman] {
	//They have to be each others spouse
	m = w.spouse
	w = m.spouse

	//In the next state, there will be some new person that will have m and w as parents
	one (Person' - Person)
	(Person' - Person).parents' = (m + w)

	//The rest isn't affected
	all p : Person | p.parents = p.parents'
	all p : Person | p.spouse = p.spouse'
}

// Marriage
pred marry [x : Person, y : Person] {
	//They're not the same person
	x  != y

	//Initially, none of them as a spouse
	no x.spouse
	no y.spouse

	//They can't be each other ancestor
	x not in y.^parents
	y not in x.^parents

	//In the next state, they will be each other's spouse
	x = y.spouse'
	y = x.spouse'

	//The rest isn't affected
	all p : (Person - (x + y)) | p.spouse = p.spouse'
	all p : Person | p.parents = p.parents'
	Person = Person'
}

pred nop {
	Person' = Person
	parents' = parents
	spouse' = spouse
}

// Specify the initial state

fact init {
	//Initially, there are no spouses nor parents
	no spouse
	no parents
	
	//There must be Adam and Eve
	one Adam
	one Eve 
	
	//There mustn't be no one else
	no (Person - (Adam + Eve))
}

fact events {
	always (
		nop or
		(some m : Man, w : Woman | reproduce[m,w]) or
		(some x, y : Person | marry[x,y])
	)
}

// Checking the expected invariants
check Acyclic
check Spouses
check Parents
check Legal

// Specify a scenario where Adam and Eve marry and only afterwards have 
// children and grandchildren
// Configure the theme to color differently man and woman and layout
// the geneology as a tree
run Genesis {	

}

// Find a scenario where someone ends up being their own "grandparent"
run OwnGrandparent {
	eventually (some p : Person | p in p.parents.parents)
}
