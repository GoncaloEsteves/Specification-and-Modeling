/* 
Complete o seguinte modelo de uma colónia de camaleões onde o número de 
camaleões é fixo mas onde a cor de cada camaleão pode mudar de acordo com
as seguintes regras: 
- As cores possíveis são Verde, Azul e Amarelo
- Se 2 camaleões de cores diferentes se encontram mudam ambos para a terceira cor
- As cores só se alteram na situação acima 
*/
abstract sig Cor {}

one sig Verde, Azul, Amarelo extends Cor {}

sig Camaleao {
	var cor : one Cor
}

fun verdes : set Camaleao{
	{c : Camaleao | c.cor = Verde}
}

fun amarelos : set Camaleao{
	{c : Camaleao | c.cor = Amarelo}
}

fun azuis : set Camaleao{
	{c : Camaleao | c.cor = Azul}
}

pred nop {
	cor = cor'
}

pred encontro [x, y : Camaleao] {
	x != y

	(x.cor = y.cor)  implies (x.cor' = y.cor' and x.cor' = x.cor)

	(x.cor != y.cor) implies (x.cor' = y.cor' and x.cor' = (Cor - (x.cor + y.cor)))

	all c : (Camaleao - (x + y)) | c.cor = c.cor'
}

fact Comportamento {
	always (nop or some x,y : Camaleao | encontro[x,y])
}

// Especifique as seguintes propriedades desta colónia

assert Estabilidade {
	// Se os camaleoes ficarem todos da mesma cor, as cores nunca mais mudam
	always ((one Camaleao.cor) implies (always (Camaleao.cor = Camaleao.cor')))
}

check Estabilidade for 5

assert NaoConvergencia {
	// Se inicialmente há um camaleao verde e nenhum azul então não é possível
	// que a colónia fique toda amarela
	((one (Verde.~cor)) and (no (Azul.~cor))) implies (always some (Camaleao.cor - Amarelo))
}

check NaoConvergencia for 5

// Especifique um cenário onde existe um camaleao que não para de mudar de cor
// tomando recorrentemente todas as cores possíveis

run Exemplo {
	one c : Camaleao | always (c.cor != c.cor' and c.cor != c.(cor')' and c.cor' != c.(cor')')
}

