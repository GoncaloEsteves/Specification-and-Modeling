open util/ordering[Id]

sig Node {
	id : one Id,
	succ : one Node,
	var inbox : set Id,
	var outbox : set Id
}

sig Id {}

fact ring {
	all i : Id | lone id.i
	all n : Node | Node in n.^succ
}

fun elected : set Node {
	{ n : Node | once (n.id in n.inbox) }
}

//Propagar mensagem para o no seguinte
pred send [n : Node] {
	//Implicitamente, a seguir "obrigamos" a que n.outbox nao seja vazia
	//Algum no na outbox do no recebido vai passar a estar presente na inbox do no sucessor do recebido
	some i : n.outbox {
		n.outbox' = n.outbox - i
		n.succ.inbox' = n.succ.inbox + i
	}
	//Todas as inbox, sem ser a do no sucessor ao recebido, ficam iguais
	all m : Node - n.succ | m.inbox' = m.inbox
	//Todas as outbox, sem ser a do no recebido, ficam iguais
	all m : Node - n | m.outbox' = m.outbox
}

//Versao mais pointfree
/*pred send [n : Node] {
	some i : n.outbox {
		outbox' = outbox - (n -> i)
		inbox' = inbox + (i -> n)
	}
}*/

//Verificar qual o Id mais elevado, que deverÃ¡ ser propagado
pred compute [n : Node] {
	//O maior Id na inbox do no recebido vai passar a estar presente na outbox desse mesmo no
	some i : n.inbox {
		n.inbox' = n.inbox -  i
		n.outbox' = n.outbox + (i - n.id.*(~next))
		//linha de cima "mais legivel" --> lte[i, n.id] implies n.outbox' = n.outbox else n.outbox' = n.outbox + i
	}
	//a inbox e a outbox de qualquer no, sem ser o no recebido, mantem-se inalteradas
	all m : Node - n | m.inbox' = m.inbox
	all m : Node - n | m.outbox' = m.outbox
}

pred skip {
	inbox' = inbox
	outbox' = outbox
}

//Facto inicial
fact init {
	no inbox
	//id associa cada no ao seu id, outbox associa cada no aos ids a mandar, logo, no inicio, ambas tem de associar cada no ao seu id
	outbox = id
}

//Facto que implica que haja sempre algo a ocorrer no modulo em qualquer momento
fact transitions{
	always (skip or some n : Node | send[n] or compute[n])
}

//Verifica se ha a possibilidade de enviar algo
pred sendEnabled [n : Node]{
	some n.outbox
}

//Verifica se ha a possibilidade de computar algo
pred computeEnabled [n : Node]{
	some n.inbox
}

//Facto necessario para se verificar a propriedade de liveness
fact fairness{
	all n : Node {
		((eventually always sendEnabled[n]) implies (always eventually send[n]))
		((eventually always computeEnabled[n]) implies (always eventually compute[n]))
	}
}

run {}
run scenario1 { eventually some elected } for 3 Id, exactly 3 Node, exactly 6 steps
run scenario1 { eventually some elected } for 4 Id, exactly 4 Node, exactly 10 steps

//Descreve uma ou mais propriedades que se devem verificar sempre
assert safety {
	always lone elected
}
check safety

//Descreve uma ou mais propriedades que devem obrigar o protocolo a fazer sempre alguma coisa
assert liveness {
	some Node implies eventually some elected
}
check liveness
