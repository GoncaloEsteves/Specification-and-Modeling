// Modelo abstracto de um sistema de emissão de cartões bancários
abstract sig Status {}

one sig Unissued, Issued, Cancelled extends Status {}

sig Card {
	var status : one Status
}

sig Client {
	var cards : set Card
}

//Devolve todos os cartoes Issued
fun cardsIssued : set Card {
	{c : Card | c.status = Issued}
}

//Devolve todos os cartoes Issued
fun cardsCancelled : set Card {
	{c : Card | c.status = Cancelled}
}

//Devolve todos os cartoes Issued
fun cardsUnissued : set Card {
	{c : Card | c.status = Unissued}
}

// Condições iniciais do sistema
fact Init {
	no cards
	Card.status = Unissued
}

// Condições de justiça estritamente necessárias para garantir a propriedade de animação
fact Fairness {
	all c : Card {
		//Eventualmente, todos os cartões poderão ser emitidos e, como tal, todos o deverão ser
		((eventually always emitEnabled[c]) implies (always eventually some a : Client | emit[c,a]))
		//Eventualmente, todos os cartões poderão ser cancelados e, como tal, todos o deverão ser
		((eventually always cancelEnabled[c]) implies (always eventually cancel[c]))
	}
}

// Operação de emitir um cartão para um cliente
pred emit [c : Card, a : Client] {
	//Um cartao apenas passara a Issued se estiver Unissued
	c.status = Unissued
	c.status' = Issued
	
	//Num estado inicial, o cartao nao devera ter um cliente associado
	no (c.(~cards))

	//No estado seguinte, o unico dono do cartao devera ser o cliente passado
	a = c.(~cards)'
	//No estado seguinte, o cartao devera fazer parte dos cartoes do cliente passado, sem alterar os restantes
	a.cards' = a.cards + c

	//Tudo o resto deverá ficar inalterado
	all x : (Card - c) | x.status = x.status'
	all y : (Client - a) | y.cards = y.cards'
}

//Operação que verifica se um cartão está pronto para ser emitido
pred emitEnabled [c : Card] {
	c.status = Unissued
}

// Operação de cancelar um cartão
pred cancel [c : Card] {
	//Um cartao apenas passara a Cancelled se estiver Issued
	c.status = Issued
	c.status' = Cancelled
	
	//No estado seguinte, o cartao não deverá ter dono	
	no (c.(~cards)')
	//No estado seguinte, os restantes cartoes do cliente que possuia o cartao cancelado ficarao iguais
	c.(~cards).cards' = c.(~cards).cards - c

	//Tudo o resto ficara inalterado
	all x : (Card - c) | x.status = x.status'
	all y : (Client - c.(~cards)) | y.cards = y.cards'
}

//Operação que verifica se um cartão poderá ser cancelado
pred cancelEnabled [c : Card] {
	c.status = Issued
}

pred nop {
	status' = status
	cards' = cards
}

fact Traces {
	always (nop or one c : Card | cancel[c] or one a : Client | emit[c,a])
}

// Especifique um cenário onde 3 cartões são emitidos a pelo menos 2
// clientes e são todos inevitavelmente cancelados, usando os scopes
// para controlar a cardinalidade das assinaturas
// Tente também definir um theme onde os cartões emitidos são verdes
// e os cancelados são vermelhos, ocultando depois toda a informação que
// seja redundante 
// Pode introduzir definições auxiliares no modelo se necessário
run Exemplo {
	eventually all c : Client | some c.cards
} for exactly 3 Card, exactly 2 Client

// Algumas das propriedades desejadas para o sistema
assert NoUnissuedCards {
  	always Unissued not in Client.cards.status
}

assert NoSharedCards {
	always all disj x, y : Client, c : x.cards | always (c not in y.cards)
}

assert AllCancelled {
	all c : Card | always (c.status = Issued implies eventually c.status = Cancelled)
}

// Especifique as operações do sistema por forma a garantir as propriedades
// de segurança
check NoUnissuedCards
check NoSharedCards
check AllCancelled
